-- table.lua – Pandoc Lua filter to improve LaTeX tables
--
-- ▸ Converts Pandoc Table elements to LaTeX tables that use the `booktabs` style
-- ▸ Preserves column alignment and captions / labels
-- ▸ Automatically adds \toprule, \midrule, and \bottomrule
-- ▸ Packs the table in a floating environment and tweaks spacing for better typography
--
-- Usage (add to your pandoc call just like image.lua):
--     pandoc -f markdown -t latex --lua-filter=table.lua input.md -o out.tex
--
-- NOTE: Make sure that the LaTeX preamble loads the `booktabs` package.

local stringify = (require 'pandoc.utils').stringify

---Convert a list of Cell objects to LaTeX row string
---@param cells table<pandoc.Cell>
---@return string
local function row_to_latex(cells)
  local parts = {}
  for i, cell in ipairs(cells) do
    -- Convert the cell (a list of blocks) to LaTeX
    local content = pandoc.write(pandoc.Pandoc(cell.contents), 'latex')
    -- Remove trailing newline inserted by writer
    content = content:gsub('%s+$', '')
    -- Replace internal line breaks with spaces to avoid nested environments
    content = content:gsub('[\n]+', ' ')
    table.insert(parts, content)
  end
  return table.concat(parts, ' & ') .. ' \\\\'
end

---Map Pandoc alignment to LaTeX column spec
---@param align string
---@return string
local function align_to_spec(align)
  if align == 'AlignLeft' then
    return 'l'
  elseif align == 'AlignRight' then
    return 'r'
  elseif align == 'AlignCenter' or align == 'AlignDefault' then
    return 'c'
  else
    return 'l'
  end
end

function Table(tbl)
  -- Build column format string, ignoring explicit widths (second item in colspec)
  local colspec = {}
  for _, spec in ipairs(tbl.colspecs) do
    table.insert(colspec, align_to_spec(spec[1]))
  end
  local col_format = table.concat(colspec, '')

  local lines = {}
  table.insert(lines, '\n% ----  generated by table.lua filter ----')
  table.insert(lines, '\n\\begin{table}[!htp]')
  table.insert(lines, '\\centering')
  table.insert(lines, string.format('\\begin{tabular}{@{}%s@{}}', col_format))
  table.insert(lines, '\\toprule')

  -- header rows
  if tbl.head then
    for _, row in ipairs(tbl.head.rows) do
      table.insert(lines, row_to_latex(row.cells))
    end
    table.insert(lines, '\\midrule')
  end

  -- body rows (can be multiple bodies)
  for _, body in ipairs(tbl.bodies) do
    for _, row in ipairs(body.body) do
      table.insert(lines, row_to_latex(row.cells))
    end
    -- optional row groups: after each body except the last add midrule
    if body ~= tbl.bodies[#tbl.bodies] then
      table.insert(lines, '\\midrule')
    end
  end

  -- foot rows, if any
  if tbl.foot and #tbl.foot.rows > 0 then
    table.insert(lines, '\\midrule')
    for _, row in ipairs(tbl.foot.rows) do
      table.insert(lines, row_to_latex(row.cells))
    end
  end

  table.insert(lines, '\\bottomrule')
  table.insert(lines, '\\end{tabular}')

  -- caption and label
  if tbl.caption then
    local caption_txt = stringify(tbl.caption.long)
    if caption_txt ~= '' then
      table.insert(lines, string.format('\\caption{%s}', caption_txt))
    end
    if tbl.identifier and tbl.identifier ~= '' then
      table.insert(lines, string.format('\\label{%s}', tbl.identifier))
    end
  end

  table.insert(lines, '\\end{table}\n')

  local latex = table.concat(lines, '\n')
  return pandoc.RawBlock('latex', latex)
end
